service: myserverlessproject2

frameworkVersion: "2"

plugins:
  - serverless-bundle
  - serverless-webpack

package:
  individually: true

provider:
  name: aws
  runtime: nodejs14.x
  profile: serverlessUser
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  #environment:
    #tableName: ${self:custom.tableName}
    #LUNAS_TABLE_NAME: ${self:custom.LunasTable.name}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - sns:SetSMSAttributes
        - sns:Publish
        - ses:*
      Resource: "*"

functions:
  getLunas:
    handler: src/endpoints/getLunas.handler
    events:
      - http:
          method: GET
          path: /getLunas/{ID}
          cors: true

  # Cronjob
  #sendReminder:
  #  handler: src/scheduleTasks/reminderEmail.handler
  #  events:
  #    - schedule: cron(0 9 ? * 7 *) # min, hours, day of month, day of the week (9am, no matter day of the month, every month, seventh day of the week, every single day)
  #sendMorningNews:
  #  handler: src/scheduleTasks/morningNews.handler
  #  events:
  #    - schedule: cron(15 7 ? * * *)

  # SMS
  #sendSMS:
  #  handler: src/endpoints/sendSMS.handler
  #  events:
  #    - http:
  #        path: send-sms
  #        method: POST
  #        cors: true

  # websocket
  websocket-connect:
    handler: src/websockets/connect.handler
    events:
      - websocket:
          route: $connect # built-in routes
  websocket-disconnect:
    handler: src/websockets/disconnect.handler
    events:
      - websocket:
          route: $disconnect
  websocket-default:
    handler: src/websockets/default.handler
    events:
      - websocket:
          route: $default
  websocket-message:
    handler: src/websockets/message.handler
    events:
      - websocket:
          route: message # route identifier

resources:
  Resources:
    # LunasTable: ${file(resources/LunasTable.yml):LunasTable}
    # WebSocketUserTable: ${file(resources/WebSocketUserTable.yml):WebSocketUserTable}
    # References:
    # https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_CreateUserPool.html
    # https://serverless-stack.com/chapters/configure-cognito-user-pool-in-serverless.html
    # https://forum.serverless.com/t/cognito-userpool-yaml-schema-bashing-my-head-against-a-wall/10287
    # https://gist.github.com/singledigit/2c4d7232fa96d9e98a3de89cf6ebe7a5
    # https://forum.serverless.com/t/how-to-get-cognito-user-pool-id-and-the-app-client-id-in-lambda/8334
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.stage}-030422-user-pool
        UsernameAttributes: # Atributos con los que el usuarix puede iniciar sesión
          - email
          - phone_number
        AutoVerifiedAttributes: # Medios para verificar la cuenta del usuarix
          - email
        # También se puede definir un Schema para que cognito guarde otros datxs
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true
          - Name: phone_number
            AttributeDataType: String
            Mutable: false
            Required: true
          - Name: name
            AttributeDataType: String
            Mutable: true
            Required: true
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.stage}-030422-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool # This user can access this user pool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false
        # https://www.freecodecamp.org/news/aws-cognito-authentication-with-serverless-and-nodejs/
  #Outputs:
    #LunaTableName: ${file(resources/LunasTable.yml):Outputs.LunasTableName}
    #LunaTableArn: ${file(resources/LunasTable.yml):Outputs.LunasTableArn}

#custom:
  #tableName: WebsocketUsers
  #LunasTable:
    #name: !Ref LunasTable #nombre lógico de iamRoleStatemens
    #arn: !GetAtt LunasTable.Arn